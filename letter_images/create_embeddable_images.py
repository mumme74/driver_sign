#! /usr/bin/env python3

# This file compresses all .png files in this file
# and stores as c code so we can embedd it in uC such Arduino
# Note! Image width and height must match screen size
from PIL import Image
from pathlib import Path
import configparser, os, shutil

dir_path = Path(__file__).absolute().parent

config = configparser.ConfigParser()
config.read(dir_path / "config.ini")

# ------- start File classes  ----------
class File:
  def __init__(self, filename):
    self.path = dir_path / filename
    self.file = open(self.path, 
                      encoding='utf8', mode='w')
    self.add_preamble()

  def __del__(self):
    self.add_postamble()
    self.file.close()

# ------ the c-header file -------
class Hdr(File):
  def __init__(self):
      super().__init__("images.h")

  def add_preamble(self):
      self.file.write(
"""// This is an autogenerated file, edit at your own peril.
#ifndef IMAGES_H
#define IMAGES_H
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

// This is a compressed version to save space. 
// Store length of consecuatly same pixel value.
// When rendering we render that many pixels of that color.
struct vlu_seg {
  uint16_t len; // How many consecuetive pixels of ths same color.
  uint8_t vlu;  // What pixel value to render.
};
 
/// An image is a collection of vlu_seg segments.
struct vlu_img {
  const struct vlu_seg* segs; // The segments this image contains
  uint16_t n_segs;      // Number of segments in this image.
};

///Function pointer to a function that send 1 byte to screen
typedef void (*images_send_data)(uint8_t byt);

/// The actual decompress and render function
int images_render(
    const struct vlu_img* img,
    const images_send_data send_fn,
    const uint32_t max_pixels);
"""
        )
  
  def add_image(self, filename, num_bytes, var_name):
    self.file.write(f"""
// image: {filename.name}, size: {num_bytes}
extern const struct vlu_img {var_name};
""")

  def add_postamble(self):
    self.file.write("""

#ifdef __cplusplus
} // extern "C"
#endif

#endif // IMAGES_H
""")
# ------ end Hdr class --------------
    
# class c-file
class Src(File):
  def __init__(self):
    super().__init__("images.c")
  
  def add_preamble(self):
    self.file.write(
"""// This is an autogenerated file, edit at your own peril.

#include \"images.h\" 
                 
int images_render(
    const struct vlu_img* img,
    const images_send_data send_fn,
    const uint32_t max_pixels) 
{
  uint32_t pixel_cnt = 0;
  uint8_t byt = 0, p = 0;
  for (uint16_t i = 0; i < img->n_segs; i++) {
    for (uint16_t j = 0; j < img->segs[i].len; j++) {
      if (max_pixels < ++pixel_cnt)
        return 0;

      // rebuild the byte (8 pixels)
      byt |= img->segs[i].vlu << (7-p);
      if (8 == ++p) { 
        // send in chunks of 8 bits
        send_fn(byt);
        byt = p = 0;
      }
    }
  }
}

""")

  def add_image(self, filename, var_name, vlus):
    self.file.write(f"""
/// File: {filename.name}
static const struct vlu_seg {var_name}_segs[{len(vlus)}] = """ + "{\n")
    for seg in vlus:
        self.file.write(f"  {{.len = {seg[1]}, .vlu = {seg[0]}}},\n")   
    self.file.write("};\n")
    self.file.write(f"""
const struct vlu_img {var_name} = {{
  .segs = {var_name}_segs,
  .n_segs = {len(vlus)}
}};
""")

  def add_postamble(self):
     pass
# ---- end Src class ---------------------
  
def all_png_files():
  return [fn for fn in dir_path.iterdir() 
            if fn.suffix == '.png']

def sanitize_name(filename):
  name = filename.stem
  convert = {
    ' ':'_',
    'å':'a', 'Å':'A',
    'ä':'a', 'Ä':'A',
    'ö':'o', 'Ö':'O'
  }
  for n, r in convert.items():
    name = name.replace(n, r)
  return name

def auto_copy_embedded_files():
  if config['embed'].getboolean('autocopy_to_src_dir'):
    for file in ('images.c', 'images.h'):
      shutil.copyfile(dir_path / file, dir_path / '..' / 'sign' / file)
    print(f"Copied images.c and images.h to arduino project dir.")
  else:
    print("You need to manually copy images.c and images.h to arduino project dir.")

# embed each png in current folder
def main():
  h_file = Hdr()
  c_file = Src()

  total_size = 0
  total_files = 0
  for filename in all_png_files(): 
    var_name = sanitize_name(filename)
    with Image.open(dir_path / filename) as img:
      pixels = img.load()
      w,h = img.size
      vluLen = 0
      vlus = []
      vlu = 0
      image_size = 0
      for y in range(h):
        for x in range(w):
          # compress it
          pix_vlu = 1 if pixels[x,y] > 0x7F else 0
          if pix_vlu != vlu or vluLen == 65535:
            if vluLen:
              vlus.append((vlu, vluLen))
              image_size += 1
            vluLen = 0
            vlu = pix_vlu
          vluLen += 1
          
      if vluLen:
        vlus.append((vlu, vluLen))
        image_size += 1

      # calc size of this image as stored in flash
      num_bytes = image_size * 3 + 4 + 2
      total_size += num_bytes
      total_files += 1
      print(f"embedded: {filename.name}, size: {num_bytes} bytes")

      h_file.add_image(filename, num_bytes, var_name)
      c_file.add_image(filename, var_name, vlus)
    
  # print result
  print(f"""
---------------------------
Compressed {total_files} images.
Total_size: {total_size} bytes of flash (Only used images will take up place in flash memory).
""")
  
  auto_copy_embedded_files()
    
if __name__ == "__main__":
   main()